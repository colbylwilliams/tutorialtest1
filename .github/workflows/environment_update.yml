name: Update Environment

permissions:
  id-token: write
  contents: read

on:
  push:
    paths:
      - 'ADE.Tutorial/**'
  pull_request:
    types: [synchronize]
    paths:
      - 'ADE.Tutorial/**'

concurrency: ${{ github.event.number || github.ref_name }}

jobs:
  setup:
    name: Setup
    if: github.event_name == 'pull_request' || (contains(github.event.ref, 'refs/heads') && !github.event.created)
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.setup.outputs.name }}
      type: ${{ steps.setup.outputs.type }}
    steps:
      - name: ADE Setup
        id: setup
        uses: colbylwilliams/deployment-environments-setup@main

  update:
    name: Update
    if: github.event_name == 'pull_request' || (contains(github.event.ref, 'refs/heads') && !github.event.created)
    runs-on: ubuntu-latest

    needs: setup
    environment: ${{ needs.setup.outputs.type }}

    steps:
      - run: echo "${{ needs.setup.outputs.type }}"

      - uses: actions/checkout@v3

      - name: Build ADE.Tutorial
        run: dotnet publish ./ADE.Tutorial -c Release -o ./publish && (cd ./publish && zip -r ../publish.zip .)

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Update Environment
        id: update
        uses: colbylwilliams/deployment-environments@main
        with:
          create: true
          tenant: ${{ vars.AZURE_TENANT_ID }}
          subscription: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          devcenter: ${{ vars.AZURE_DEVCENTER }}
          project: ${{ vars.AZURE_PROJECT }}
          catalog: ${{ vars.AZURE_CATALOG }}
          catalog-item: ${{ vars.AZURE_CATALOG_ITEM }}
          environment-name: ${{ needs.setup.outputs.name }}
          environment-type: ${{ needs.setup.outputs.type }}

      - name: Deploy ADE.Tutorial
        run: |
          az functionapp deployment source config-zip --name ${{ needs.setup.outputs.name }} --src publish.zip \
              --subscription ${{ steps.update.outputs.subscription }} --resource-group ${{ steps.update.outputs.resource-group }}

          echo "- [View environment resources in the Azure portal](${{ needs.setup.outputs.portal-url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [View the deployed API](https://${{ needs.setup.outputs.name }}.azurewebsites.net/api/time)" >> $GITHUB_STEP_SUMMARY

  # config:
  #   if: github.event_name == 'pull_request' || (contains(github.event.ref, 'refs/heads') && !github.event.created)
  #   name: Get Configuration
  #   uses: ./.github/workflows/environment_config.yml

  # update_env:
  #   if: github.event_name == 'pull_request' || (contains(github.event.ref, 'refs/heads') && !github.event.created)
  #   name: Update ${{ needs.config.outputs.type }} Environment
  #   runs-on: ubuntu-latest

  #   needs: config
  #   environment: ${{ needs.config.outputs.type }}

  #   env:
  #     ENVIRONMENT_NAME: ${{ needs.config.outputs.name }}
  #     ENVIRONMENT_TYPE: ${{ needs.config.outputs.type }}

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Build ADE.Tutorial
  #       run: dotnet publish ./ADE.Tutorial -c Release -o ./publish && (cd ./publish && zip -r ../publish.zip .)

  #     - name: Install DevCenter CLI Extension
  #       run: az extension add --name devcenter --upgrade

  #     - name: Az CLI login
  #       uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ vars.AZURE_TENANT_ID }}
  #         subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

  #     - name: Get Resource Group
  #       shell: bash {0}
  #       run: |
  #         echo "Getting environment ${{ env.ENVIRONMENT_NAME }}..."
  #         environment_rg=$(az devcenter dev environment show --name ${{ env.ENVIRONMENT_NAME }} \
  #             --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
  #             --only-show-errors --query resourceGroupId --output tsv 2>&1)

  #         if [ $? -ne 0 ]; then
  #             # Prod (main) environment may not be created yet
  #             if [[ $environment_rg =~ "EnvironmentCannotBeFound" || $environment_rg =~ "EnvironmentNotFound" ]] && [[ "$ENVIRONMENT_TYPE" == "Prod" ]]; then
  #                 echo "Environment ${{ env.ENVIRONMENT_NAME }} not found, creating..."

  #                 environment_rg=$(az devcenter dev environment create \
  #                     --name ${{ env.ENVIRONMENT_NAME }} --environment-type ${{ env.ENVIRONMENT_TYPE }} \
  #                     --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
  #                     --catalog-name ${{ vars.AZURE_CATALOG }} --catalog-item-name ${{ vars.AZURE_CATALOG_ITEM }} \
  #                     --parameters '{ "name": "${{ env.ENVIRONMENT_NAME }}" }' --only-show-errors \
  #                     --query resourceGroupId --output tsv 2>&1)

  #                 if [ $? -ne 0 ]; then
  #                     echo "Failed to create environment ${{ env.ENVIRONMENT_NAME }}"
  #                     echo "::error::az devcenter dev environment create command failed: $environment_rg"; exit 1
  #                 fi
  #             else
  #                 echo "Failed to get environment ${{ env.ENVIRONMENT_NAME }}"
  #                 echo "::error::az devcenter dev environment show command failed: $environment_rg"; exit 1
  #             fi
  #         fi

  #         environment_group=${environment_rg##*/}
  #         environment_sub=${environment_rg%/resourceGroups*}
  #         environment_sub=${environment_sub##*/}

  #         echo "ENVIRONMENT_GROUP=$environment_group" >> $GITHUB_ENV
  #         echo "ENVIRONMENT_SUB=$environment_sub" >> $GITHUB_ENV

  #         echo "- [View environment resources in the Azure portal](https://portal.azure.com/#@${{ vars.AZURE_TENANT_ID }}/resource$environment_rg)" >> $GITHUB_STEP_SUMMARY

  #     - name: Deploy ADE.Tutorial
  #       run: |
  #         az functionapp deployment source config-zip --name ${{ env.ENVIRONMENT_NAME }} --src publish.zip \
  #             --subscription ${{ env.ENVIRONMENT_SUB }} --resource-group ${{ env.ENVIRONMENT_GROUP }}

  #         echo "- [View the deployed API](https://${{ env.ENVIRONMENT_NAME }}.azurewebsites.net/api/time)" >> $GITHUB_STEP_SUMMARY
