name: Update Environment

permissions:
  id-token: write
  contents: read

on:
  push:
    paths:
      - 'ADE.Tutorial/**'
  pull_request:
    types: [synchronize]
    paths:
      - 'ADE.Tutorial/**'

concurrency: ${{ github.event.number || github.ref_name }}

jobs:
  config:
    if: github.event_name == 'pull_request' || (contains(github.event.ref, 'refs/heads') && !github.event.created)
    name: Get Environment
    uses: ./.github/workflows/environment_config.yml

  update_env:
    if: github.event_name == 'pull_request' || (contains(github.event.ref, 'refs/heads') && !github.event.created)
    name: Update Environment
    runs-on: ubuntu-latest

    needs: config
    environment: ${{ needs.config.outputs.type }}

    env:
      ENVIRONMENT_NAME: ${{ needs.config.outputs.name }}
      ENVIRONMENT_TYPE: ${{ needs.config.outputs.type }}

    steps:
      - uses: actions/checkout@v3

      - name: Build ADE.Tutorial
        run: dotnet publish ./ADE.Tutorial -c Release -o ./publish && (cd ./publish && zip -r ../publish.zip .)

      - name: Install DevCenter CLI Extension
        run: az extension add --name devcenter --upgrade

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Get Environment Resource Group
        run: |
          environment_rg=$(az devcenter dev environment show --name ${{ env.ENVIRONMENT_NAME }} \
              --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
              --only-show-errors --query resourceGroupId --output tsv 2>&1)

          if [ $? -eq 0 ]; then
              environment_group=${environment_rg##*/}
              environment_sub=${environment_rg%/resourceGroups*}
              environment_sub=${environment_sub##*/}

              echo "ENVIRONMENT_GROUP=$environment_group" >> $GITHUB_ENV
              echo "ENVIRONMENT_SUB=$environment_sub" >> $GITHUB_ENV
          elif [[ $environment_rg =~ "EnvironmentCannotBeFound" ]] && [[ "$ENVIRONMENT_TYPE" == "Prod" ]]; then

              # Prod (main) environment may not be created yet
              environment_rg=$(az devcenter dev environment create \
                  --name ${{ env.ENVIRONMENT_NAME }} --environment-type ${{ env.ENVIRONMENT_TYPE }} \
                  --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
                  --catalog-name ${{ vars.AZURE_CATALOG }} --catalog-item-name ${{ vars.AZURE_CATALOG_ITEM }} \
                  --parameters '{ "name": "${{ env.ENVIRONMENT_NAME }}" }' --only-show-errors \
                  --query resourceGroupId --output tsv 2>&1)

              if [ $? -eq 0 ]; then
                  environment_group=${environment_rg##*/}
                  environment_sub=${environment_rg%/resourceGroups*}
                  environment_sub=${environment_sub##*/}

                  echo "ENVIRONMENT_GROUP=$environment_group" >> $GITHUB_ENV
                  echo "ENVIRONMENT_SUB=$environment_sub" >> $GITHUB_ENV
              else
                  echo "::error::az devcenter dev environment create command failed: $environment_rg"; exit 1
              fi
          else
              echo "::error::az devcenter dev environment show command failed: $environment_rg"; exit 1
          fi

      - name: Deploy ADE.Tutorial
        run: |
          az functionapp deployment source config-zip --name ${{ env.ENVIRONMENT_NAME }} --src publish.zip \
              --subscription ${{ env.ENVIRONMENT_SUB }} --resource-group ${{ env.ENVIRONMENT_GROUP }}
